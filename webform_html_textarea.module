<?php

/**
 * @file
 * Webform module textarea component.
 */

/**
 * Implementation of hook_webform_component_info
 */
function webform_html_textarea_webform_component_info() {
  return array(
    'html_textarea' => array(
      'label' => t('HTML Textarea'),
      'description' => t('A large text area that allows for multiple lines of input in HMTL. Supoorts wysiwyg'),
      'features' => array(
        'spam_analysis' => TRUE,
      ),
    ),
  );
}

/**
 * Implementation of _webform_defaults_component().
 */
function _webform_defaults_html_textarea() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'mandatory' => 0,
    'extra' => array(
      'cols' => '',
      'rows' => '',
      'title_display' => 0,
      'resizable' => 1,
      'disabled' => 0,
      'description' => '',
      'attributes' => array(),
      'format' => FILTER_FORMAT_DEFAULT,
      'show_tips' => 1,
    ),
  );
}


/**
 * Implementation of _webform_theme_component().
 */
function _webform_theme_html_textarea() {
  return array(
    'webform_display_html_textarea' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of _webform_edit_component().
 */
function _webform_edit_html_textarea($component) {
  $form = array();
  $form['#tree'] = TRUE;
  $form['value']['value'] = array(
    '#type' => 'textarea',
    '#title' => t('Default value'),
    '#default_value' => $component['value'],
    '#description' => t('The default value of the field.') . theme('webform_token_help'),
    '#cols' => 60,
    '#rows' => 5,
    '#weight' => 0,
    '#parents' => array('value')
  );
  $form['value']['format'] = filter_form();
  foreach(element_children($form['value']['format']) as $child) {
    $form['value']['format'][$child]['#parents'] = array('extra', 'format');
  }

  $form['display']['cols'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $component['extra']['cols'],
    '#description' => t('Width of the textarea.') . ' ' . t('Leaving blank will use the default size.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#parents' => array('extra', 'cols'),
  );
  $form['display']['rows'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => $component['extra']['rows'],
    '#description' => t('Height of the textarea.') . ' ' . t('Leaving blank will use the default size.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#parents' => array('extra', 'rows'),
  );
  $form['display']['resizable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Resizable'),
    '#description' => t('Make this field resizable by the user.'),
    '#weight' => 2,
    '#default_value' => $component['extra']['resizable'],
    '#parents' => array('extra', 'resizable'),
  );
  $form['display']['disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disabled'),
    '#return_value' => 1,
    '#description' => t('Make this field non-editable. Useful for setting an unchangeable default value.'),
    '#weight' => 11,
    '#default_value' => $component['extra']['disabled'],
    '#parents' => array('extra', 'disabled'),
  );
  $form['display']['show_tips'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show filter tips'),
    '#description' => t('Show the filter tips to the user.'),
    '#weight' => 11,
    '#default_value' => $component['extra']['show_tips'],
    '#parents' => array('extra', 'show_tips'),
  );
  return $form;
}

/**
 * Implementation of _webform_render_component().
 */
function _webform_render_html_textarea($component, $value = NULL, $filter = TRUE) {

  $key = (isset($component['form_key'])) ? $component['form_key'] : $component['name'];
  $element[$key][$key] = array(
    '#type' => 'textarea',
    '#title' => $filter ? _webform_filter_xss($component['name']) : $component['name'],
    '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
    '#default_value' => $filter ? _webform_filter_values($component['value']) : $component['value'],
    '#required' => $component['mandatory'],
    '#weight' => $component['weight'],
    '#description' => $filter ? _webform_filter_descriptions($component['extra']['description']) : $component['extra']['description'],
    '#rows' => !empty($component['extra']['rows']) ? $component['extra']['rows'] : 5,
    '#cols' => !empty($component['extra']['cols']) ? $component['extra']['cols'] : 60,
    '#attributes' => $component['extra']['attributes'],
    '#resizable' => (bool) $component['extra']['resizable'], // MUST be FALSE to disable.
    '#theme_wrappers' => array('webform_element_wrapper'),
    '#pre_render' => array('webform_element_title_display'),
    '#post_render' => array('webform_element_wrapper'),
    '#webform_component' => $component,
  );

  if ($component['extra']['disabled']) {
    $element[$key][$key]['#attributes']['readonly'] = 'readonly';
  }

  if (isset($value)) {
    $element[$key][$key]['#default_value'] = $value[0];
  }
  $element[$key]['format'] = filter_form($component['extra']['format']);
  $children = element_children($element[$key]['format']);
  if (!isset($element[$key]['format']['format'])) {
    foreach ($children as $child) {
      if ($child == $component['extra']['format']) {
        unset($element[$key]['format'][$child]);
      }
      else {
        $element[$key]['format'] = array(
          $component['extra']['format'] => array(
            '#type' => 'value',
            '#value' => $component['extra']['format'],
            '#parents' => array('format'),
          ),
        );
        $guidelines = "";
        if ($component['extra']['show_tips']) {
          $extra = $extra = theme('filter_tips_more_info');
          $tips = _filter_tips($component['extra']['format'], FALSE);
          $guidelines = theme('filter_tips', $tips, FALSE, $extra);
        }
        $element[$key]['format']['format']['guidelines'] = array(
          '#title' => t('Formatting guidelines'),
          '#value' => $guidelines,
        );
      }
    }
  }
  else if (!$component['extra']['show_tips']){
    //hide tips
    unset($element[$key]['format'][2]);
    $element[$key]['format']['format']['guidelines']['#value'] = '';
  }
  return $element;
}

/**
 * Implementation of _webform_display_component().
 */
function _webform_display_html_textarea($component, $value, $format = 'html') {
  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_html_textarea',
    '#theme_wrappers' => $format == 'html' ? array('webform_element', 'webform_element_wrapper') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#format' => $format,
    '#value' => isset($value[0]) ? $value[0] : '',
    '#webform_component' => $component,
  );
}

/**
 * Implementation of _webform_submit_component().
 */
function _webform_submit_html_textarea($component, $value) {
  $key = (isset($component['form_key'])) ? $component['form_key'] : $component['name'];
  $val = isset($value[$key][$key]) ? $value[$key][$key] : '';
  return array($val);
}

/**
 * Format the output of data for this component.
 */
function theme_webform_display_html_textarea($element) {
  $output = $element['#format'] == 'html' ? str_replace("\n", '<br />', check_markup($element['#value'], $element['#webform_component']['extra']['format'])) : $element['#value'];
  if (strlen($output) > 80) {
    $output = ($element['#format'] == 'html') ? '<div class="webform-long-answer">' . $output . '</div>' : $output;
  }
  return $output !== '' ? $output : ' ';
}

/**
 * Implementation of _webform_analysis_component().
 */
function _webform_analysis_html_textarea($component, $sids = array()) {
  $placeholders = count($sids) ? array_fill(0, count($sids), "'%s'") : array();
  $sidfilter = count($sids) ? " AND sid in (" . implode(",", $placeholders) . ")" : "";
  $query = 'SELECT data ' .
    ' FROM {webform_submitted_data} ' .
    ' WHERE nid = %d ' .
    ' AND cid = %d ' . $sidfilter;
  $nonblanks = 0;
  $submissions = 0;
  $wordcount = 0;

  $result = db_query($query, array_merge(array($component['nid'], $component['cid']), $sids));
  while ($data = db_fetch_array($result)) {
    if (drupal_strlen(trim($data['data'])) > 0) {
      $nonblanks++;
      $wordcount += str_word_count(trim($data['data']));
    }
    $submissions++;
  }

  $rows[0] = array(t('Left Blank'), ($submissions - $nonblanks));
  $rows[1] = array(t('User entered value'), $nonblanks);
  $rows[2] = array(t('Average submission length in words (ex blanks)'), ($nonblanks != 0 ? number_format($wordcount/$nonblanks, 2) : '0'));
  return $rows;
}

/**
 * Implementation of _webform_table_component().
 */
function _webform_table_html_textarea($component, $value) {
  return empty($value[0]) ? '' : check_markup($value[0], $component['extra']['format']);
}

/**
 * Implementation of _webform_csv_headers_component().
 */
function _webform_csv_headers_html_textarea($component, $export_options) {
  $header = array();
  $header[0] = '';
  $header[1] = '';
  $header[2] = $component['name'];
  return $header;
}

/**
 * Implementation of _webform_csv_data_component().
 */
function _webform_csv_data_html_textarea($component, $export_options, $value) {
  return empty($value[0]) ? '' : $value[0];
}

